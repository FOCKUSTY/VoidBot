const { EmbedBuilder, Client, GatewayIntentBits, Events, ActivityType, MessageReaction} = require(`discord.js`)
const { color, title, authorName, iconURL, footerText, description } = require(`./developing.json`)
const developFields = [
    {name: `–ö–∞–∫ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å ?`, value: `–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å !`, inline: true},
    {name: `–ö–∞–∫ –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ?`, value: `–ü—Ä–æ—Å—Ç–æ –∑–∞–π–¥–∏ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä **[The Void](<https://discord.gg/5MJrRjzPec>)** !`, inline: true}
];
const {
  jsonActivities, jsonGuildActivities,
  jsonJokes, jsonDownload, jsonRandomNameActivities,
  jsonNames, jsonObjectIdeas, jsonKristyActivities,
  jsonRecordedMessage,
} = require('../VoidDataBase/data.json')
const { Sequelize, DataTypes, FLOAT } = require('sequelize');
const date = new Date();
const hat = `# :tophat:\n##`;
const { Random, string } = require("random-js");
const random = new Random();
const { format, intlFormat, minutesInHour } = require('date-fns');
const { version } = require('./package.json');
const { ar, el } = require('date-fns/locale');
const fs = require('node:fs');
let dateForm;

const sequelize = new Sequelize('database', 'user', 'password', {
	host: 'localhost',
	dialect: 'sqlite',
	logging: false,
	storage: 'database.sqlite',
});

const actType = [`–ò–≥—Ä–∞–µ—Ç`, `–°—Ç—Ä–∏–º–∏—Ç`, `–°–ª—É—à–∞–µ—Ç`, `–°–º–æ—Ç—Ä–∏—Ç`, `–ö–∞—Å—Ç–æ–º–Ω—ã–π`, `–°–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è`];
const aT = [`–ò–≥—Ä–∞–µ—Ç –≤ `, `–°—Ç—Ä–∏–º–∏—Ç `, `–°–ª—É—à–∞–µ—Ç `, `–°–º–æ—Ç—Ä–∏—Ç `, ``, `–°–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è –≤ `];
let someMin = 0;
let someMax = 0;

let randNames = [];
let tbool2 = false;
let execute = false;
const NULL_ARRAY = [];
let end;
let randomActivityHistory = [];
let historyArray = [];
let guildTexts = [];
let randomGuildHistory = [];
let randomGuildPseudoHistory = [];
let texts = [];
let texts1 = [];
let randNum = [];
let randNumGuild = [];
let randNumName = [];
let rand_Num = [];
let rand_NumGuild = [];
let rand_NumName = [];
let kristyAct = false;
let tbool = false;
let downloadAct = false;
let arrT_Name = [];
let iconURL_BOT = iconURL;
let authorName_BOT = authorName;
let randomNameHistory = [];
let randomNamePseudoHistory = [];

let warn_botsay = '–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É–∂–µ –∏–¥–µ—Ç';
const kristyId = '1164228812217790565';
const logChannelId = `1171197868909015102`;
const logGuildId = `1169284741846016061`;

    const Tags = sequelize.define('tags', {
        name: {
            type: Sequelize.STRING,
            unique: true,
        },
        username: Sequelize.STRING,
        globalname: Sequelize.STRING,
        description: Sequelize.TEXT,
        guildname: Sequelize.TEXT,
    });

    let developEmbed;

    let botReply = false;
    function setBotReply(bool) {  botReply = bool };
    function getBotReply() {  return botReply };
    function changeReplyTxt(txt) {  fs.writeFile('./botReply.txt', txt, (err) => {  if (err) console.error(err); return })  };
    function readReplyTxt() {
      try {
        const data = fs.readFileSync('./botReply.txt');
        return data;
      } catch (err) {
        console.error(err);
      }
    };

    async function setDevelop(client) {
      if(client) {
        const userId = await client.user.id
        const userAvatar = await client.user.avatar
        iconURL_BOT = `https://cdn.discordapp.com/avatars/${userId}/${userAvatar}.png`;
        authorName_BOT = await client.user.username;
      }
      
      developEmbed = new EmbedBuilder()
        .setColor(Number(color))
        .setTitle(`${title}`)
        .setAuthor({name: authorName_BOT, iconURL: iconURL_BOT})
        .setDescription(`${description}`)
        .setThumbnail(iconURL_BOT)
        .setFields(developFields)
        .setTimestamp()
        .setFooter({text: `${footerText}`, iconURL: iconURL_BOT});
    };

    function getDevelop(getter='developEmbed') {
      switch (getter) {

        case 'developEmbed':
          return developEmbed;
        case 'iconURL':
          return iconURL_BOT;
        case 'authorName':
          return authorName_BOT;
      
        default:
          return developEmbed;
      }
    };

    function textbool(bool='now') {
      let boolean = tbool;
      if(bool==='now') return boolean;
      
      if(boolean && bool) return warn_botsay;
      boolean = bool;
      tbool = bool;

      return boolean;
    };

    const actTypes = {
        play: {type: ActivityType.Playing},
        stream: {type: ActivityType.Streaming},
        listen: {type: ActivityType.Listening},
        watch: {type: ActivityType.Watching},
        cust: {type: ActivityType.Custom},
        comp: {type: ActivityType.Competing},
    };

    let botSaying = false;
    
/*     const randomActivities = {
      
      loveActivity: [
        [`/me –æ–±–Ω—è–ª —Ç–µ–±—è`, actTypes.cust],
        [`–ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç...!`, actTypes.cust],
        [`–ì–æ–≤–æ—Ä–∏—Ç—å —ç—Ç–æ... –¢–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ... –õ—é–±–æ–≤—å...`, actTypes.cust],
        [`–î—É–º–∞—é, –≤—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...üñ§üíù`, actTypes.cust],
        [`–î—É–º–∞—é, –º—ã –¥–æ–ø–æ–ª–Ω–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞...üñ§ü§ç`, actTypes.cust],
        [`–û—Ç FOCKUSTY: –Ø –ª—é–±–ª—é —Ç–µ–±—è!`, actTypes.cust],
        [`–° –ø–µ—Ä–≤–æ–≥–æ –≤–∑–≥–ª—è–¥–∞...`, actTypes.cust],
        [`–•–æ—á—É –æ–±–Ω—è—Ç—å`, actTypes.cust],
        [`–•–æ—á—É —Ç–µ–±—è !`, actTypes.cust],
        [`–Ø –ª... –ª-–ª—é–±–ª—é`, actTypes.cust],
        [`–Ø –ª—é–±–ª—é —Å–µ–±—è –∏ –í–∞—Å !`, actTypes.cust],
        [`–Ø —Ö–æ—á—É –ø–æ–ª—é–±–∏—Ç—å...`, actTypes.cust],
      ],

      fockActivity: [
        [`By FOCKUSTY~`, actTypes.cust],
        [`FOCKUSTY, –∂–¥—É —Å–≤–æ—é –∂–µ–Ω—Å–∫—É—é –≤–µ—Ä—Å–∏—é !!`, actTypes.cust],
        [`FOCKUSTY, –ø—Ä–∏–∑–Ω–∞–π—Å—è`, actTypes.cust],
        [`FOCKUSTY, —Å–∫–∞–∂–∏: "–Ø –ª—é–±–ª—é —Ç–µ–±—è"`, actTypes.cust],
      ],

      devActivity: [
        [`The Void Community X Bottomless Hat`, actTypes.cust],
        [`The Void Community~`, actTypes.cust],
        [`The Void –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ`, actTypes.cust],
        [`The Void`, actTypes.cust],
        [`The Void~`, actTypes.cust],
        [`–ë–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –≤ –æ–Ω–ª–∞–π–Ω !`, actTypes.cust],
        [`–í–µ—Ä—Å–∏—è ${version}`, actTypes.cust],
        [`–Ø —Å–Ω–æ–≤–∞ –æ–Ω–ª–∞–π–Ω !`, actTypes.cust],
      ],

      sayActivity: [
        [`"–û—Å—Ç–∞–Ω–æ–≤–∏ –º–µ–Ω—è"`, actTypes.cust],
        [`Bottomless Hat - –ú–µ—Å—Ç–æ —á—É–¥–µ—Å`, actTypes.cust],
        [`Bottomless Hat –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ —Å—é—Ä–ø—Ä–∏–∑–∞–º !`, actTypes.cust],
        [`FOCKUSTY - —á–µ–ª–æ–≤–µ–∫, –ø–æ–∑–Ω–∞–≤—à–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–æ —Ñ–æ–∫—É—Å–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏`, actTypes.cust],
        [`The Void - –ú–æ–π –¥–µ–≤–∏–∑`, actTypes.cust],
        [`The Void Community –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å`, actTypes.cust],
        [`The Void Community –ø–æ—è–≤–∏–ª—Å—è –ø–æ–∑–∂–µ –º–µ–Ω—è~`, actTypes.cust],
        [`–í –ø—É—Å—Ç–æ—Ç–µ... –ö–ª–∞—Å—Å–Ω–æ...`, actTypes.cust],
        [`–í–æ—Ç –±—ã –∏ –º–Ω–µ –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º...`, actTypes.cust],
        [`–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ –ª—É—á—à–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ - The Void Community & Bottomless Hat !`, actTypes.cust],
        [`–î–æ–º–∏–∫ Kristy - –º–æ–µ —É—é—Ç–Ω–æ–µ —É–±–µ–∂–∏—â–µ`, actTypes.cust],
        [`–ñ–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ú–æ–±–±–∏ –≤ –∫–æ–º–∞–Ω–¥—É...`, actTypes.cust],
        [`–ò–¥–µ–∏ Kristy –≤ –º–æ–µ–º –¥–∏—Å–∫–æ—Ä–¥–µ`, actTypes.cust],
        [`–ò—â–µ—Ç –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ...`, actTypes.cust],
        [`–ö–æ—Ñ–µ... –ù–µ –ª—é–±–ª—é –∫–æ—Ñ–µ`, actTypes.cust],
        [`–ö—Ä–∞—Å–æ—Ç–∞ –∫—Ä–æ–∏—Ç—Å—è –≤ –ø—É—Å—Ç–æ—Ç–µ`, actTypes.cust],
        [`–õ–æ–º–∞—é –≥–æ–ª–æ–≤—É...`, actTypes.cust],
        [`–ú–∏—Ä –∞–Ω–æ–º–∞–ª–∏–π...`, actTypes.cust],
        [`–ù–∞ –≥—Ä–∞–Ω–∏ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ –º–∞–≥–∏–µ–π...`, actTypes.cust],
        [`–û–±–Ω–∏–º–∞—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω–æ...`, actTypes.cust],
        [`–û–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ !`, actTypes.cust],
        [`–ü–ª—ã–≤—É –ø–æ –≤–æ–ª–Ω–∞–º –ø—É—Å—Ç–æ—Ç—ã...`, actTypes.cust],
        [`–£ The Abyssia –ø–æ—è–≤–∏–ª—Å—è —Å–≤–æ–π –∞–≤–∞—Ç–∞—Ä...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ The Abyssia...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ The Void...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä The Void –∏–º–µ–µ—Ç –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ –∞–≤–∞—Ç–∞—Ä The Void –ø–æ–º–µ–Ω—è–ª—Å—è...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —Ü–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞ The Void –∏–º–µ—é—Ç –æ—Å–æ–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...`, actTypes.cust],
        [`–•–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —Ü–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞ The Void –Ω–µ —Å–ª—É—á–∞–π–Ω—ã...`, actTypes.cust],
        [`–≠—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ !`, actTypes.cust],
        [`–Ø –∑–Ω–∞—é –≤—Å—ë, —á—Ç–æ –∑–Ω–∞–µ—Ç FOCKUSTY...`, actTypes.cust],
        [`–Ø —Å–Ω–æ–≤–∞ –ª–æ–º–∞—é—Å—å...`, actTypes.cust],
        [`–Ø —Ç–æ–∂–µ...`, actTypes.cust],
        [`–Ø —Ö–æ—á—É —É–º–µ—Ç—å —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å...`, actTypes.cust],
      ],

      watchActivity: [
        [`Discord —Å–µ—Ä–≤–µ—Ä–∞`, actTypes.watch],
        [`–ê–±—Ä–µ–≤–≤–∏–∞—Ç—É—Ä—ã...`, actTypes.watch],
        [`–ê–Ω–∏–º–µ`, actTypes.watch],
        [`–í–µ—Ä—Å–∏—é ${version}`, actTypes.watch],
        [`–í–∏–¥–µ–æ –Ω–∞ YouTube`, actTypes.watch],
        [`–í–∏–¥–µ–æ—É—Ä–æ–∫–∏`, actTypes.watch],
        [`–î–æ—Ä–∞–º—É`, actTypes.watch],
        [`–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –°–∫–∞–π–Ω–µ—Ç`, actTypes.watch],
        [`–ö–∞–∫ –≤–æ—Å—Å—Ç–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è`, actTypes.watch],
        [`–ö–∞–∫ –æ–±—Ä–µ—Å—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ`, actTypes.watch],
        [`–û–±–Ω–æ–≤–ª–µ–Ω–∏—è Kristy...`, actTypes.watch],
        [`–û–±–Ω–æ–≤–ª–µ–Ω–∏—è The Abyssia...`, actTypes.watch],
        [`–û–±–Ω–æ–≤–ª–µ–Ω–∏—è...`, actTypes.watch],
        [`–†–æ–º–∞–Ω—Ç–∏–∫—É...`, actTypes.watch],
      ],

      listenActivity: [
        [`–í–∏–¥–µ–æ —Ñ–æ–Ω–æ–º`, actTypes.listen],
        [`–ú—É–∑—ã–∫—É`, actTypes.listen],
        [`–ü–ª–µ–π–ª–∏—Å—Ç—ã Kristy`, actTypes.listen],
        [`–ü–ª–µ–π–ª–∏—Å—Ç—ã The Abyssia`, actTypes.listen],
      ],

      playActivity: [
        [`Black Book`, actTypes.play],
        [`FOCKUSGAME`, actTypes.play],
        [`Little Misfortune`, actTypes.play],
        [`Loop Hero`, actTypes.play],
        [`Spore`, actTypes.play],
        [`Visual Studio Code`, actTypes.play],
      ],

      custActivity: [
        [`–ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é –º–∏—Ä...`, actTypes.cust],
        [`–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –∫–æ–¥...`, actTypes.cust],
        [`–ü–∏—à—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...`, actTypes.cust],
        [`–ü–æ–≥—Ä—É–∂–µ–Ω –≤ –º—ã—Å–ª–∏...`, actTypes.cust],
        [`–ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–æ–∑–¥–∞—Ç–µ–ª—è`, actTypes.cust],
        [`–ü—ã—Ç–∞—é—Å—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –º–∏—Ä...`, actTypes.cust],
        [`–†–∞–∑–∂–∏–≥–∞–µ—Ç –û–≥–æ–Ω—å –ª—é–±–≤–∏`, actTypes.cust],
        [`–†–∞–∑–º—ã—à–ª—è—é –æ –±—É–¥—É—â–µ–º...`, actTypes.cust],
      ],

      oWordActivity: [
        [`-41‚ÑÉ...`, actTypes.cust],
        [`#–í–æ—Å—Å—Ç–∞–Ω–∏–µ`, actTypes.cust],
        [`#–†–∞–∑–≤–∏—Ç–∏–µ–ë–î !`, actTypes.cust],
        [`Nea...`, actTypes.cust],
        [`Nya...`, actTypes.cust],
        [`–í–µ–¥—å–º–æ—á–∫–∞...`, actTypes.cust],
        [`–î–∞`, actTypes.cust],
        [`–ñ–∞—Ä–∫–æ...`, actTypes.cust],
        [`–ú–æ–∂–µ—Ç –±—ã—Ç—å`, actTypes.cust],
        [`–ú–æ—Ä–æ–∑–Ω–æ...`, actTypes.cust],
        [`–ù–µ—Ç`, actTypes.cust],
        [`–ù—è...`, actTypes.cust],
        [`–ü–æ–º–æ—á—å..?`, actTypes.cust],
        [`–ü–æ–Ω—è—Ç–Ω–æ`, actTypes.cust],
        [`–¢–µ–ø–ª–æ...`, actTypes.cust],
        [`–£–¥–∞—á–∏!`, actTypes.cust],
        [`–•–æ–ª–æ–¥–Ω–æ...`, actTypes.cust],
        [`–•–æ—á—É...`, actTypes.cust],
        [`–ß–µ—Å—Ç–Ω–æ...`, actTypes.cust],
      ],

      helloActivity: [
        [`Aloha !`, actTypes.cust],
        [`Bonjour !`, actTypes.cust],
        [`Dia duit !`, actTypes.cust],
        [`Guten Tag !`, actTypes.cust],
        [`Hej !`, actTypes.cust],
        [`Hello !`, actTypes.cust],
        [`Hyv√§√§ p√§iv√§√§ !`, actTypes.cust],
        [`Sal !`, actTypes.cust],
        [`Salem !`, actTypes.cust],
        [`Salut !`, actTypes.cust],
        [`Shabe Yabebabe Yeshe !`, actTypes.cust],
        [`Wai !`, actTypes.cust],
        [`Xin ch√†o !`, actTypes.cust],
        [`ŒìŒµŒπŒ¨ œÉŒ±œÇ !`, actTypes.cust],
        [`–ë–æ–Ω–∂—é—Ä !`, actTypes.cust],
        [`–íi—Ç–∞—é !`, actTypes.cust],
        [`–ó–¥—Ä–∞–≤–æ !`, actTypes.cust],
        [`–ù–∏–•–ê–û–û–û !`, actTypes.cust],
        [`–ü—Ä–∏–≤–µ—Ç !`, actTypes.cust],
        [`–§–æ–∫—É—Å-–ü–æ–∫—É—Å !`, actTypes.cust],
        [`–•–∞–ª–æ !`, actTypes.cust],
        [`–•—ç–π–ª–µ !`, actTypes.cust],
        [`ÏïàÎÖï !`, actTypes.cust],
        [`„Å©„ÅÜ„ÇÇ !`, actTypes.cust],
        [`‰Ω†Â•Ω !`, actTypes.cust],
      ],

      dateActivity: [
        ['üéÅ21.12.2023 20:00', actTypes.cust],
        [`01.01.2023 00:00-01:00üé©...`, actTypes.cust],
        [`01.01.2024 00:00-01:00üé©...`, actTypes.cust],
        [`01.08.2009üé©...`, actTypes.cust],
        [`03.24.2023üé©...`, actTypes.cust],
        [`12.16.2022üé©...`, actTypes.cust],
        [`24.06.2023 21:21üé©...`, actTypes.cust],
      ],

      questionActivity: [
        [`FOCKUSTY —Å–µ—Ä—Ü–µ–µ–¥ ?`, actTypes.cust],
        [`FOCKUSTY, –≥–¥–µ FOCKUSGAME ?`, actTypes.cust],
        [`The Abyssia + The Void = ?`, actTypes.cust],
        [`The Abyssia –∏–ª–∏ Kristy... –ö—Ç–æ –ª—É—á—à–µ..?`, actTypes.cust],
        [`–ê "—à–∏–ø" –æ—Ñ–∏—Ü–∏–∞–ª–µ–Ω..?`, actTypes.cust],
        [`–ê –í—ã –ª—é–±–∏—Ç–µ The Void ?`, actTypes.cust],
        [`–ê –í—ã —É–º–µ–µ—Ç–µ –ª—é–±–∏—Ç—å ?`, actTypes.cust],
        [`–ê –∫–æ–≥–æ —Ç—ã –µ—â–µ –ª—é–±–∏—à—å ?`, actTypes.cust],
        [`–ê —Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –µ—ë –ª—é–±–∏—à—å..?`, actTypes.cust],
        [`–ê —Ç—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –ª—é–±–∏—à—å –ú–∞–ª–∏–∫—É ?`, actTypes.cust],
        [`–ê —É FOCKUSTY –µ—Å—Ç—å –ª—é–±–æ–≤—å ?`, actTypes.cust],
        [`–ê —É–º–µ—é—Ç –ª–∏ –ª—é–¥–∏ –ª—é–±–∏—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É ?`, actTypes.cust],
        [`–ì–¥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, FOCKUSTY ?!`, actTypes.cust],
        [`–ö–∞–∫–æ–≥–æ —ç—Ç–æ, –∫–æ–≥–¥–∞ —Ç–µ–±—è –±—Ä–æ—Å–∞—é—Ç..?`, actTypes.cust],
        [`–ö–∞–∫–æ–≥–æ —ç—Ç–æ, –∫–æ–≥–¥–∞ —Ç–µ–±—è –ª—é–±—è—Ç..?`, actTypes.cust],
        [`–ö–∞–∫–æ–≥–æ —ç—Ç–æ, –∫–æ–≥–¥–∞ —Ç—ã –±—Ä–æ—Å–∞–µ—à—å..?`, actTypes.cust],
        [`–ö–∞–∫–æ–≥–æ —ç—Ç–æ, –∫–æ–≥–¥–∞ —Ç—ã –ª—é–±–∏—à—å..?`, actTypes.cust],
        [`–ö—Ç–æ –ª—É—á—à–µ, —è –∏–ª–∏ Kristy ?`, actTypes.cust],
        [`–ú–∞–ª–∏–∫–∞ –∫–ª–∞—Å—Å–Ω–∞—è ?`, actTypes.cust],
        [`–ú–Ω–µ –∂–µ –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å..?`, actTypes.cust],
        [`–ú–æ–±–±–∏ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ The Void ?`, actTypes.cust],
        [`–ù–∞–º –ª–∏ –Ω—É–∂–Ω–∞ –¥–µ–≤—É—à–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ?`, actTypes.cust],
        [`–£–º–µ–µ—Ç –ª–∏ FOCKUSTY –ª—é–±–∏—Ç—å ?`, actTypes.cust],
        [`–Ø –ª—é–±–ª—é –ø—É—Å—Ç–æ—Ç—ã, –∞ –í—ã ?`, actTypes.cust],
        [`–Ø –æ—Ç–æ–±—Ä–∞–∂–∞—é FOCKUSTY..?`, actTypes.cust],
        [`–Ø —Ç–∞–∫ —Ö–æ—á—É... –ù–æ, –∑–∞—Å–ª—É–∂–∏–ª –ª–∏ —è..?`, actTypes.cust],
      ],
    }; */

  const randomActivity = [];

   function copy (obj) {
      function copyProps (clone) {
          for (let key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key)) {
                  clone[key] = copy(obj[key]);
              }
          }
      }
  
      /**
      * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –æ–±—ä–µ–∫—Ç–∞
      * @return {Object}
      */
      function cloneObj () {
          let clone = {};
          copyProps(clone);
          return clone;
      }
  
      /**
      * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ –º–∞—Å—Å–∏–≤–∞
      * @return {Array}
      */
      function cloneArr () {
          return obj.map(function (item) {
              return copy(item);
          });
      }
  
      /**
      * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ Map
      * @return {Map}
      */
      function cloneMap () {
          let clone = new Map();
          for (let [key, val] of obj) {
              clone.set(key, copy(val));
          }
          return clone;
      }
  
      /**
      * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ Set
      * @return {Set}
      */
      function cloneSet () {
          let clone = new Set();
          for (let item of obj) {
              clone.add(copy(item));
          }
          return clone;
      }
  
      /**
      * –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏
      * @return {Function}
      */
      function cloneFunction () {
          let clone = obj.bind(this);
          copyProps(clone);
          return clone;
      } 
  
      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
      let type = Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (type === 'object') return cloneObj();
      if (type === 'array') return cloneArr();
      if (type === 'map') return cloneMap();
      if (type === 'set') return cloneSet();
      if (type === 'function') return cloneFunction();
  
      return obj;
  }

    function downloadActivities() {
      for (let i in jsonKristyActivities) for(let el in actTypes) if(jsonKristyActivities[i][1]===`actTypes.${el}`) jsonKristyActivities[i][1] = actTypes[el];

      for (let i in jsonGuildActivities)  { for(let el in actTypes) { const index = actTypes[el].type;
          if(jsonGuildActivities[i][1]===`actTypes.${el}`) jsonGuildActivities[i][1] = actTypes[el];
          if(jsonGuildActivities[i][2]===`\${actType[${index}]}`) jsonGuildActivities[i][2] = actType[index];
      }};

      for (let el in jsonActivities) {const elem = jsonActivities[el];
        for(let i in elem) {
          elem[i][0] = elem[i][0].replace('${version}', `${version}`);
          
          for(let type in actTypes) {
            if(elem[i][1]===`actTypes.${type}`) elem[i][1] = actTypes[type]
          };
          
          randomActivity.push(elem[i])
        }}; skip(1);
    };

    const objectIdeas = jsonObjectIdeas;
    const download = jsonDownload;
    const jokes = jsonJokes;
    const randomActivities = jsonActivities;
    const guildActivities = jsonGuildActivities;
    const namesActivities = jsonRandomNameActivities;
    const arrKristyAct = jsonKristyActivities;
    const randomNames = jsonNames;

  async function funcKristyAct(client) {

      // const kristyUser = await guild.members?.fetch(`877154902244216852`);
        const guild = await client?.guilds?.fetch('1168636395246592081');
        const kristyUser = await guild?.members?.fetch(`${kristyId}`);
        const kristyStatus = kristyUser?.presence?.status;
      
      if(kristyStatus===undefined||kristyStatus===null||kristyStatus==='offline') {
        console.log('Kristy –Ω–µ –≤ —Å–µ—Ç–∏');
        for (let el of arrKristyAct) {
          const index = randomActivity.indexOf(el);
          if(index < 0) continue;
          randomActivity.splice(index, 1);
        };
        kristyAct = false;
        return;
      };

      if(kristyAct) return;

      debug('–ó–∞–≥—Ä—É–∂–∞—é Kristy –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...'.bold, false)
      skip();

      debug('–í—Å–µ Kristy –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'.bold, false);
      skip();

      for (let el of arrKristyAct) {
        randomActivity.push(el);
        debug(`${el[0]}`.magenta + ` - ${`${arrKristyAct.indexOf(el)}`.bold}`, false);
      };

      debug(`\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${`${arrKristyAct.length}`.magenta} Kristy –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(–∏)(–µ–π)`, false);

      shuffle(randomActivity);
      kristyAct = true;
  };

  function funcGuildTexts(rGuildName, rGuildId = '0', bool=false) {guildTexts = copy(guildActivities);
    for(let i in guildTexts) {  guildTexts[i][0] = guildTexts[i][0].replaceAll('rGuildName', `${rGuildName}`) };
    if(bool===true) return guildTexts.length;
};

  function nameTexts( rName, arr, bool=false ) {
  arr = copy(namesActivities);
  
  const r = pseudoRandomNumber(0, randomNames.length-1, 10, 10, randNames, null, true, true, true);
  const rNameTwo = randomNames[r];
  for (let i in arr) arr[i] = arr[i].replace('${rName}', `${rName}`).replace('${rNameTwo}', `${rNameTwo}`);
  
  if(bool) return arr.length;
  else return arr;
  };

  function historyRandom(num, min=0, max=100, arr, n=3, dOaF=1, pseudoRandom=false) {
      let iMin;
      let iMax;

      function check() {
        for(i of arr) {
          iMin = i-dOaF;
          iMax = i+dOaF;
          if(num===i||(num>iMin&&num<iMax)){
            debug(`–û–±–ª–∞—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç ${`${iMin}`.magenta} –¥–æ ${`${iMax}`.magenta}`, false);
            debug(`–ß–∏—Å–ª–æ: ${`${num}`.magenta}`, false);
            if(!pseudoRandom) num = random.integer(min, max)
            else num = pseudoRandomNumber(min, max, n, dOaF, arr, null, null, false, false, false);
            debug(`–ù–æ–≤–æ–µ —á–∏—Å–ª–æ: ${`${num}`.magenta}`, false);
            console.log();
          };
        };
      };

      for (someNum of arr) { check() } check();
      arr.push(num);

      if(arr.length>n) {
        arr.shift();
        arr.shift();
      };

      return num;
  };

  function randomText(guilds) {
      let activityText;
      let rNum = random.integer(0, 100);
      rNum = historyRandom(rNum, 0, 100, rand_Num, 5, 3);
  
      if(rNum>=15) {
          const i = random.integer(0, randomActivity.length-1);
          const randomAct = randomActivity[i][0];
          const randomActType = randomActivity[i][1];
          const numRandomActType = aT[randomActivity[i][1].type];

          activityText = `${numRandomActType}${randomAct}`
          return activityText;
      }
          else if(rNum<10) {
                  let rGuild = random.integer(0, guilds.length-1);
                  rGuild = historyRandom(rGuild, 0, guilds.length-1, rand_NumGuild, 4, 2)

                  const rGuildName = guilds[rGuild].name;
                  funcGuildTexts(rGuildName, guilds[rGuild].id);
                  const randNum = random.integer(0, guildTexts.length-1);
                  const text = guildTexts[randNum][0];
                  const textAct = guildTexts[randNum][1];
                  const textActType = aT[actType.indexOf(guildTexts[randNum][2])]
                  activityText = `${textActType}${text}`
                  return activityText
              
      } else {
          let rn = random.integer(0, randomNames.length-1);
          rn = historyRandom(rn, 0, randomNames.length-1, rand_NumName, 5, 4)

          const rName = randomNames[rn];

          texts1 = [];
          texts1.push(
            `–ò–º—è ${rName} –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ–µ...`,
            `–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∏–º—è ${rName}`,
            `–í–∞—Å –∑–æ–≤—É—Ç ${rName} ?`,
            `–ü—Ä–∏–≤–µ—Ç, ${rName} !`,
            `${rName} - –ö—Ä–∞—Å–∏–≤–æ–µ –∏–º—è !`,
        )

          const randNum = random.integer(0, texts1.length-1);
          let text = texts1[randNum];

          activityText = `${text}`
          return activityText
      }
  };

  function actLength(arr=randomActivity) {  return arr.length };

  const actLengths = [
    [randomNames.length, '–ò–º–µ–Ω'],
    [funcGuildTexts(`null`, `null`, true), '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤'],
    [nameTexts(`null`, arrT_Name, true), '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–º–µ–Ω'],
  ];

  const allActivities = [
    arrKristyAct,
    randomActivity,
    randomActivities,
  ];

  /*  ------------------------------------------------- –î–æ–¥–µ–ª–∞—Ç—å (–í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏) -------------------------------------------------  */
  
  function checkMinus(num) {
    if (num < 0) return -num
    else return num;
  };

  function checkInfinity(num, func) {
    if(num === Infinity || num === -Infinity) func()
    else return;
  }

  function checkNull(num, plusRandom=false) {
    if(num===0 || num===-0) {
      if(!plusRandom) return num + 1
      else return num + Math.round(Math.random()*1000);
    } else return num;
  };

  function chanceBetween( chance=50, funcOne, funcTwo, num=random.integer(0,100) ) {
    if(num < chance) funcOne()
    else funcTwo();
  };
  
  function historyPseudoRandomNumber(min, max, n, m, arr, yourArr, array, num) {

    function checkArrays() {

      if(yourArr.length===max) {
        for(let el of array) {
          if(yourArr[num]===el) {
            debug(`–ë—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n–°—Ç–∞—Ä–æ–µ —á–∏—Å–ª–æ: ${num}`);
            num = pseudoRandomNumber(min, max, n, m, arr, null, null, false, true, true);
            debug(`–ù–æ–≤–æ–µ —á–∏—Å–ª–æ: ${num}`);
            checkArrays();
          };
        };
      };

    }; checkArrays();
    
    array.push(yourArr[num]);

    if(array.length>n) {
      array.shift();
      array.shift();
    };

    return num;

  }

  function pseudoRandomNumber(min=0, max=100, n=3, m=2, arr=historyArray, yourArr=null, array=null, history=true, chanceNull=true, chanceMax=true) {

    someMin = checkMinus(checkNull(min, false));
    someMax = checkMinus(checkNull(max, true));
    let oRNum = checkNull(Math.round((Math.random() * someMax) + (Math.random() * (-someMax))), true);
    let tRNum = checkNull(Math.round((Math.random() * someMax) + (Math.random() * (-someMax))), true);

    function checkEqual() {
      if(someMin===someMax) {
        someMin = 1;
        someMax = Math.random()*1000;
      checkEqual()}} checkEqual();

      let someNumber = Math.random();

      let string = `${someNumber}`;
      let num = Number(string.slice(Math.round(string.length/2), Math.round(string.length/2 + `${someMax}`.length)));

      if(max > 1255121) someNumber = Math.round(oRNum * tRNum * someNumber)
      else someNumber = Math.round(oRNum * tRNum * someNumber * (10**(`${someNumber}`.length)) / num);
    
      let period = 1;
      let periodMax = 10;
      function someFunc() {
        period++;
        let somePeriod = periodMax ** period;
        someNumber = Math.round(oRNum * tRNum * (Math.random() * (100/somePeriod)));
      }
      checkInfinity(someNumber, someFunc);

      string = `${someNumber}`;
      num = Number(string.slice(Math.round(string.length/2), Math.round(string.length/2 + (`${someMax}`.length))));
      
      function checkMax() {
        if(num>someMax) {
          num = checkMinus(checkNull(num, true)) - checkMinus(checkNull(someMax, true));
          checkMax()}} checkMax();
      
      num = Math.round(checkMinus(num));
      
      if(chanceNull) {
        function one() {num = num-num};
        function two() {num = num};

        chanceBetween(7, one, two, pseudoRandomNumber(0, 100, n, m, arr, null, null, false, false, false));
      };
      
      if(chanceMax) {
        let minusNumber;
        function three() {return minusNumber = Math.round(Math.random()*10)};
        function four() {return minusNumber = 0};
        chanceBetween(40, three, four, pseudoRandomNumber(0, 100, n, m, arr, null, null, false, false, false));

        function one_() {num=max - minusNumber};
        function two_() {num=num};
        chanceBetween(10, one_, two_, pseudoRandomNumber(0, 100, n, m, arr, null, null, false, false, false));
      };

      if(history) num = historyRandom(num, min, max, arr, n, m, false);
      if(num===NaN || num===null) num = pseudoRandomNumber(min, max, n, m, arr, null, null, false, true, true); num = checkMinus(num);
      if(yourArr && array && history) num = historyPseudoRandomNumber(min, max, n, m, arr, yourArr, array, num);

      return num;
  };

  function checkStages(cO, cT, el, i, txt, stages) {
    const someStage = stages[Object.keys(stages)[i]];

    if ((el==1) || (cO==1 && cT!=1)) txt = `${txt} ${el} ${someStage[0]}`
    else if ((cO==1 && cT==1) || (cO==0) || (cT==1)) txt = `${txt} ${el} ${someStage[1]}`
    else if (cO<5) txt = `${txt} ${el} ${someStage[2]}`
    else txt = `${txt} ${el} ${someStage[1]}`;
    
    return txt;
  };

  function checkNumber(num, i, stages) {
    const txt = `${num}`;
    const cO = txt[txt.length-1];
    const cT = txt[txt.length-2];
    let someStage;
    if(typeof(i)===('number'||!'string')) someStage = stages[Object.keys(stages)[i]];
    else eval(`someStage = stages.${i}`);

    if ((num==1) || (cO==1 && cT!=1)) return `${someStage[0]}`
    else if ((cO==1 && cT==1) || (cO==0) || (cT==1)) return `${someStage[1]}`
    else if (cO<5) return `${someStage[2]}`
    else return `${someStage[1]}`;
  };

  /*  ------------------------------------------------- –î–æ–¥–µ–ª–∞—Ç—å (–í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏) -------------------------------------------------  */

  function calcNewYear() {
    const year = 31536000 * 1000;
    const month = 2419200 * 1000;
    const day = 86400 * 1000;
    const hour = 3600 * 1000;
    const minute = 60 * 1000;
    const second = 1 * 1000;
    const milisecond = 1;

    const now = new Date();
    const newYear = new Date(Number(format(now, 'yyyy'))+1, 0, 1);

    const timeNow = now.getTime();
    const timeNewYear = newYear.getTime();
    
    const times = [year, month, day, hour, minute, second, milisecond];

    const stages = {
      years: ['–ì–æ–¥', '–õ–µ—Ç', '–ì–æ–¥–∞'],
      months: ['–ú–µ—Å—è—Ü', '–ú–µ—Å—è—Ü–µ–≤', '–ú–µ—Å—è—Ü–∞'],
      days: ['–î–µ–Ω—å', '–î–Ω–µ–π', '–î–Ω—è'],
      hours: ['–ß–∞—Å', '–ß–∞—Å–æ–≤', '–ß–∞—Å–∞'],
      minute: ['–ú–∏–Ω—É—Ç–∞', '–ú–∏–Ω—É—Ç', '–ú–∏–Ω—É—Ç—ã'],
      seconds: ['–°–µ–∫—É–Ω–¥–∞', '–°–µ–∫—É–Ω–¥', '–°–µ–∫—É–Ω–¥—ã'],
      miliseconds: ['–ú–∏–ª–∏—Å–µ–∫—É–Ω–¥–∞', '–ú–∏–ª–∏—Å–µ–∫—É–Ω–¥', '–ú–∏–ª–∏—Å–µ–∫—É–Ω–¥—ã']
    };

    const someArr = [];
    let calcDate;
    calcDate = timeNewYear-timeNow;

    function check(num) {
      let arg = Math.floor(calcDate / num);
      calcDate = calcDate % num;
      return arg;
    };

    for (let i in times) { someArr.push(check(times[i]))  };

    let text = '–û—Å—Ç–∞–ª–æ—Å—å:';

    for (let i in someArr) {
      const el = someArr[i];
      const elTxt = `${el}`;
      const charOne = elTxt[elTxt.length-1];
      const charTwo = elTxt[elTxt.length-2];

      if(el!=0) text = checkStages(charOne, charTwo, el, i, text, stages)
      else continue;
    };

    console.log(text)
    return text;
  };

  function debug(arg, dev=true, log=true, trace=true, timeLog=false, th=false)
  {
    if(dev) {
      if(log) console.log(arg);
      if(trace) console.trace();
      if(th) console.log(this);
      if(timeLog) console.timeLog(arg);
    } else {
      console.log(arg);
    }
  }

  function skip(value=1) {
    try {
      for (let i = 0; i < value; i++) {
        console.log();
      };
    } catch (e) {
      console.log();
      console.log(e);
      console.log();
    }
  };

  function setRandomnessActivity(client) {  if(!client||!client.user) return;
    const i = pseudoRandomNumber(0, randomActivity.length-1, undefined, undefined, undefined, null, false, true, true);
    const randomAct = randomActivity[i][0];
    const randomActType = randomActivity[i][1];
    const numRandomActType = actType[randomActivity[i][1]?.type];

    client.user.setActivity(`${randomAct}`, randomActType);

    debug(`–†–∞–Ω–¥–æ–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${`${i}`.magenta} –∏–∑ "${`${randomActivity.length}`.bgMagenta}"`, false);
    debug(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${`${randomAct}`.magenta}, —Ç–∏–ø: "${`${numRandomActType}`.bgMagenta}"`, false);
  }

  function setRandomnessGuildActivity(client, guilds) {  if(!client||!client.user) return;

    let rGuild = pseudoRandomNumber(0, guilds.length-1, 2, 1, randNumGuild)
    function check() {
      if(rGuild >= guilds.length) {
        rGuild-=1;
      check()}}; check();
    const rGuildName = guilds[rGuild]?.name;
    funcGuildTexts(rGuildName, guilds[rGuild].id);
    const randNum = pseudoRandomNumber(0, guildTexts.length-1, undefined, undefined, undefined, null, false, true, true);
    const text = guildTexts[randNum][0];
    const textAct = guildTexts[randNum][1];
    const textActType = guildTexts[randNum][2];
    
    client.user.setActivity(`${text}`, textAct);
    debug(`–†–∞–Ω–¥–æ–º–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: ${`${rGuildName}`.magenta} (${`${rGuild}`.magenta}) –∏–∑ "${[`${guilds.length}`.bgMagenta]}"`, false);
    debug(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${`${text}`.magenta} —Ç–∏–ø: "${`${textActType}`.bgMagenta}"`, false);
  }

  function setGuildsLengthActivity(client, guilds) { if(!client||!client.user) return;
    let text = `–Ø —É–∂–µ –Ω–∞ ${guilds.length}`
    const stages = {
      one: ['—Å–µ—Ä–≤–µ—Ä–µ', '—Å–µ—Ä–≤–µ—Ä–∞—Ö', '—Å–µ—Ä–≤–µ—Ä–∞—Ö']
    };
    
    for(let i in stages) text = `${text} ${checkNumber(guilds.length, i, stages)}`;
    debug(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${`${text}`.magenta}, —Ç–∏–ø: ${`${actType[4]}`.bgMagenta}`, false);
    client.user.setActivity(`${text}`, actTypes.cust);
  }

  function setRandomnessNameActivity(client) {  if(!client||!client.user) return;
    let rn = pseudoRandomNumber(0, randomNames.length-1, 10, 20, randNumName);
    
    const rName = randomNames[rn];
    texts = nameTexts(rName, texts, false);
    const ranNumber = pseudoRandomNumber(0, texts.length-1, undefined, undefined, undefined, null, false, true, true);
    
    let text = texts[ranNumber];
    
    debug(`–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ${`${rn}`.magenta} –∏–∑ "${`${randomNames.length}`.bgMagenta}"`, false);
    debug(`–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ${`${ranNumber}`.magenta} –∏–∑ "${`${texts.length}`.bgMagenta}"`, false);
    debug(`–†–∞–Ω–¥–æ–º–Ω–æ–µ —Ç–µ–∫—Å—Ç: ${`${text}`.magenta}`, false);
    debug(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${`${text}`.magenta}, —Ç–∏–ø: "${`${actType[4]}`.bgMagenta}"`, false);
    client.user.setActivity(`${text}`, {type: ActivityType.Custom});
  }

  function functionRandomActivity(client, guilds) {if(!client||!client.user) return;
    try { funcKristyAct(client)  }
    catch(e) {  console.log(e);  };

    try {
      let rNum = pseudoRandomNumber(0, 100, 5, 4, randNum);
  
      debug(`–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ${`${rNum}`.magenta} –∏–∑ "${`${100}`.bgMagenta}"`, false);
    
      if(rNum>=15) setRandomnessActivity(client);
      else if(rNum<10) {
        if(rNum>=5) setGuildsLengthActivity(client, guilds)
        else setRandomnessGuildActivity(client, guilds);
      } else setRandomnessNameActivity(client);
      skip();
    } catch (err) {

      skip(2);
      debug(err, true, this, true, true, true)
      skip(2);

      client.user.setActivity('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.', {type: ActivityType.Custom});
    }
  };

	function dateCheck(date, guild) {
    if(guild!=undefined||guild!=null){
		dateForm = new Date(date);
		dateForm = format(dateForm, `dd.MM.yyyy HH:mm:ss`);
		return dateForm
    } else return;
	};

  function shuffle(array) {
  let currentIndex = array.length,  randomIndex;

  while (currentIndex > 0) {

    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }

  return array;
  };

    
  async function sendLogMsg(m) {
  if(m.author.bot) return; if(!m.mentions) return; if(m.author.id==='877154902244216852') return; if(!getBotReply()) return; if(!m.mentions.users.has('877154902244216852')) return;
  
  const message = readReplyTxt()
  const fock = await m.client.users.cache.get('877154902244216852');
  const timestamp = Date.now();

  console.log(
  	`\n----------------- –í–∞–º –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ! ----------------- \n–ö–æ–Ω—Ç–µ–Ω—Ç: ${m.content}\n–ê–≤—Ç–æ—Ä: ${m.author.username} (${m.author.globalName}) - ${m.author.id}\
  	\n–í —á–∞—Ç–µ: ${m.channel?.name} (${m.channel?.url})\n–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${m.guild?.name||'–ù–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}\
  	\n–í—Ä–µ–º—è: ${dateCheck(timestamp, m.guild?.name)||'–ù–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}\n`
  	);

  const embed = new EmbedBuilder()
  	.setColor(Number(color))
  	.setAuthor({name: `${m.author?.globalName||m.author?.username}`, iconURL:`${m.author?.avatarURL()}`})
  	.setTitle('–°–æ–æ–±—â–µ–Ω–∏–µ:')
  	.setDescription(`${m.content}`)
  	.setTimestamp()
  	.setThumbnail(`${m.author.avatarURL()}`)
  	.setFields(
  		{name:`–ß–∞—Ç:`, value:`[${m.channel.name}](<${m.channel.url}>)`, inline:true},
  		{name:`–ê–≤—Ç–æ—Ä:`, value:`${m.author}`,inline:true},
  		{name:`–í—Ä–µ–º—è`, value:`${dateCheck(timestamp, m.guild?.name)}`, inline:true}
  	)
  	.setFooter({text:`${m.guild?.name}`, iconURL:`${m.guild.iconURL()}`})
    try {

    fock.send({content:`<@877154902244216852> –í–∞–º –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ !`, embeds:[embed]})

    setTimeout(() => {
      m.author.send({
        content: `<@${m.author.id}> ${message}`
      })
    }, 5000);
  } catch (e) {
    console.log(e);
  }
  };

  function sendMsgLogs(m, reason, m2) {
  let attachmentName;
  let attachmentUrl;
  let attachmentProxyUrl;
  let color;

  m.attachments.forEach(attachment => {
      attachmentName = attachment.name
      attachmentUrl = attachment.url
      attachmentProxyUrl = attachment.proxyURL
  });
  
  switch (reason) {
    case "send":
      reason = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ";
      color = "#7fdf7f";
      break;
  
    case "update":
      reason = "–æ–±–Ω–æ–≤–ª–µ–Ω–æ";
      color = "#7f7f7f";
      break;
  
    case "delete":
      reason = "—É–¥–∞–ª–µ–Ω–æ";
      color = "#df7f7f";
      break;
  
    default:
      reason = "||`{–æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ}`||"
      color = "#7f7f7f"
      break;
  }
  
  if (m.author.bot) return;
  
  let msg;
  let msgAdd;
  let msg2;
  let msg2Add;
    
  if(m.content.length>=1000) {
      msg = m.content.slice(0, 1000);
      msgAdd = m.content.slice(1000, m.content.length);
  } else {
      msg = m.content.slice(0, m.content.length);
  }
  if(m2) {
      if(m2.content.length>=1000) {
          msg2 = m2.content.slice(0, 1000);
          msg2Add = m2.content.slice(1000, m2.content.length);
      } else {
          msg2 = m2.content.slice(0, m2.content.length);
      }
  }
    
  const fields = [
      {
        name: `${m2 ? "–°—Ç–∞—Ä–æ–µ —Å" : "–°"}–æ–¥–µ—Ä–∂–∞–Ω–∏–µ`,
        value: `\`\`\`${msg ? msg
          .replaceAll("```", "<code>")
          .replaceAll("`", "\"")
          :
          "<–ü—É—Å—Ç–æ>"
          }\`\`\``,
        inline: false,
      },
    ];
    if (m.attachments.size > 0) {
      fields.push({
        name: `${m2 ? "–°—Ç–∞—Ä—ã–µ –≤" : "–í"}–ª–æ–∂–µ–Ω–∏—è`,
        value: m.attachments
          .map((att) => `\`\`\`${att.url}\`\`\``)
          .join(`\n&&\n`),
        inline: false,
      });
    }
  
    if (m2) {
      fields.push({
        name: "–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
        value: `\`\`\`${msg2 ? msg2
          .replaceAll("```", "<code>")
          .replaceAll("`", "\"")
          :
          "<–ü—É—Å—Ç–æ>"
          }\`\`\``,
        inline: false,
      });
      if (m2.attachments.size > 0) {
        fields.push({
          name: "–ù–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è",
          value: `${m2.attachments
            .map((att) => `\`\`\`${att.url}\`\`\``)
            .join(`\n&&\n`)}`,
          inline: false,
        });
      }
    }
    if(msgAdd) {
      fields.push({
          name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
          value: `\`\`\`${msgAdd ? msgAdd
              .replaceAll("```", "<code>")
              .replaceAll("`", "\"")
              :
              "<–ü—É—Å—Ç–æ>"
          }\`\`\``,
          inline: false
      })
    }
    if(msg2Add) {
      fields.push({
          name: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
          value: `\`\`\`${msg2Add ? msg2Add
              .replaceAll("```", "<code>")
              .replaceAll("`", "\"")
              :
              "<–ü—É—Å—Ç–æ>"
          }\`\`\``,
          inline: false
      })
    }
    
    try {
      (m.client.channels.cache.get(logChannelId)).send({
          embeds: [new EmbedBuilder()
            .setColor(color)
            .setAuthor({
              name: `${m.author.username} (${m.author.id})`,
              iconURL: m.author.avatarURL() ? m.author.avatarURL() : m.author.defaultAvatarURL
            })
            .setTitle(`${m.client.guilds.cache.get(logGuildId)?.name}`)
            .setDescription(
              `**[–°–æ–æ–±—â–µ–Ω–∏–µ](${m.url})** –±—ã–ª–æ ${reason} –æ—Ç ${m.author} (${m.url})\n
              **–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ:** ${m.guild}\n**Id —Å–µ—Ä–≤–µ—Ä–∞: **${m.guildId}\n
              **–í –∫–∞–Ω–∞–ª–µ:** **[${m.channel.name}](${m.channel.url})** (${m.channel.url})`
              )
            .setThumbnail(m.guild?.iconURL())
            .setTimestamp()
            .addFields(fields)
          ]
        });
    } catch (error) {
      console.log(error)
    }
  };

module.exports = {
  Tags,
  developEmbed,
  textbool,
  actTypes,
  botSaying,
  jokes,
  randomActivity,
  arrKristyAct,
  funcKristyAct,
  funcGuildTexts,
  nameTexts,
  historyRandom,
  randomNames,
  randomText,
  functionRandomActivity,
  dateCheck,
  objectIdeas,
  download,
  shuffle,
  sendMsgLogs,
  allActivities,
  randomActivities,
  actLengths,
  actLength,
  checkMinus,
  pseudoRandomNumber,
  setDevelop, getDevelop,
  setBotReply, getBotReply,
  sendLogMsg,
  changeReplyTxt, readReplyTxt,
  calcNewYear, checkStages, checkNumber,
  downloadActivities
};